{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/Todolists/to-do-list-reducer.ts","features/Todolists/tasks_reducer.ts","components/AddItemForm.tsx","components/EditAbleSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","components/ToDoList.tsx","features/Todolists/Todolist/Todolist.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","count","removeTaskAC","todoListId","changeTaskEntityStatusAC","entityStatus","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","resultCode","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","onAddTaskClick","trim","addItem","TextField","variant","onChange","e","currentTarget","onKeyUp","ctrlKey","key","label","helperText","IconButton","onClick","color","disabled","AddBox","EditAbleSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Task","className","Completed","Checkbox","checked","newIsDoneValue","changeStatus","New","toDoListID","changeTaskTitle","removeTask","Delete","ToDoList","useDispatch","useEffect","action","setTasksAC","items","addTask","useCallback","changeToDoListTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeToDoList","map","Button","style","margin","TodolistsList","todolists","toDoLists","useSelector","state","auth","item","addTaskAC","addTaskTC","taskID","a","removeToDoListAC","addToDoList","addTodolistsTC","changeTitleTodolistAC","changeTitleTodolistTC","Grid","padding","container","spacing","tl","allTodolistTasks","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","handleBlur","touched","FormControlLabel","control","handleChange","name","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","stateCopy","forEach","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0d19ce5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from '../app/app-reducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '97580e0f-7747-4533-9c03-60f1b0e4f8a8'\r\n    }\r\n})\r\n\r\n//api\r\nexport const todolistAPI = {\r\n    getToDoLists(): Promise<AxiosResponse<Array<TodolistType>>> {\r\n        return instance.get('todo-lists')\r\n    },\r\n    createToDoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteToDoList(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n        //return promise\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string,) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number; email: string; login: string }>>('auth/me');\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n//if you have {}\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\n//isDone:true - completed\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string,\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ResponseTasksType = {\r\n    items: Array<TaskType>\r\n    error: (string)\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolist-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import {Dispatch} from 'redux';\r\nimport {setIsLoggedInAC} from '../features/Login/authReducer';\r\nimport {authAPI} from '../api/todolist-api';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string |null,\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':{\r\n            return {...state,isInitialized: action.value}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status}) as const\r\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET-ERROR', error}) as const\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n\r\n        }\r\n        dispatch(setAppInitializedAC(true));\r\n    })\r\n}\r\nexport type SetAppErrorActionType= ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType= ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    |  SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>","import {todolistAPI, TodolistType} from '../../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\n\r\n\r\n//reducer принимает state & action возвращает newState\r\n//action содержит необходимые превращения и нужные для него данные\r\n//creator для вызова action\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.item, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//cоздание обьетка экшион//ACTION CREATOR\r\n// REDUCER - функция которая содержит в себе все что может пройзойти со state\r\n//actions\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n})\r\nexport const removeToDoListAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addToDoListAC = (item: TodolistType): AddTodolistActionType => ({type: 'ADD-TODOLIST', item})\r\nexport const changeTitleTodolistAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeFilterTodolistAC = (filter: FilterValuesType, id: string,) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    id\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getToDoLists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error =>{\r\n            handleServerNetworkError(error,dispatch)\r\n        })\r\n}\r\n\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteToDoList(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeToDoListAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistsTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createToDoList(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addToDoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTitleTodolistTC = (todolistId: string, title: string,) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTitleTodolistAC(todolistId, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n//types\r\ntype ActionsType =\r\n    | SetTodolistsActionType\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTitleTodolistAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    item: TodolistType\r\n}\r\n\r\nexport type  FilterValuesType = 'all' | 'active' | 'completed'\r\n//mixed type\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './to-do-list-reducer';\r\nimport {TaskStatuses, TaskType, todolistAPI, TodoTaskPriorities, UpdateTaskModelType} from '../../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n//reducer принимает state & action возвращает newState\r\n//action содержит необходимые превращения и нужные для него данные\r\n//creator для вызова action\r\nlet initialState: TaskStateType = {\r\n    count: [],\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    entityStatus: action.entityStatus\r\n                } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.item.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n}) as const\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => ({type: 'REMOVE-TASK', taskId, todoListId}) as const\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todoListId,\r\n    taskId\r\n} as const)\r\nexport const changeTaskEntityStatusAC = (taskId: string, todoListId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TASK-ENTITY-STATUS',\r\n    taskId,\r\n    todoListId,\r\n    entityStatus\r\n} as const)\r\n\r\n\r\n//thunk\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\n    async (dispatch: Dispatch<ActionsType>) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n            await todolistAPI.deleteTask(taskId, todolistId,)\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n\r\n//types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>,\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TodoTaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport  type ActionsType =\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\n\r\nexport type  AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n\r\n    let [title, setTitle] = useState<string>('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddTaskClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n\r\n    }\r\n\r\n    const onKeyUpHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.ctrlKey && e.key === 'Enter') {\r\n            onAddTaskClick()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyUp={onKeyUpHandler}\r\n                label={'title'}\r\n                helperText={error}\r\n                error={!!error}//строку в лог значение, в итоге дает тру\r\n            />\r\n            <IconButton onClick={onAddTaskClick} color={'primary'} disabled={props.disabled}><AddBox/></IconButton>\r\n            {/*{error && <div className={'error-message'}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type  EditAbleSpanPropsType = {\r\n    value: string\r\n    changeValue: (value: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditAbleSpan = React.memo((props: EditAbleSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value);\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode && !props.disabled\r\n        ?\r\n        <TextField\r\n            variant={'outlined'}\r\n            value={title}\r\n            onBlur={deActivatedEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n        />\r\n        : <span onDoubleClick={activatedEditMode}>{props.value} </span>\r\n})\r\n\r\nexport default EditAbleSpan","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport EditAbleSpan from '../../../../components/EditAbleSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolist-api';\r\nimport {RequestStatusType} from '../../../../app/app-reducer';\r\n\r\n\r\nexport type  TaskPropsType = {\r\n    task: TaskType\r\n    toDoListID: string\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, toDoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, toDoListID: string) => void,\r\n}\r\n\r\nconst Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.task.id, props.toDoListID)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed:TaskStatuses.New, props.toDoListID)\r\n    }\r\n    const onTitleChangeHandler = (value: string) => {\r\n        props.changeTaskTitle(props.task.id, value, props.toDoListID)\r\n    }\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed  ? 'is-done' : ''}>\r\n        <Checkbox checked={props.task.status===TaskStatuses.Completed}\r\n                  onChange={onChangeHandler}\r\n        />\r\n        <EditAbleSpan value={props.task.title}\r\n                      changeValue={onTitleChangeHandler}\r\n        />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus==='loading'} ><Delete/></IconButton>\r\n    </div>\r\n})\r\nexport default Task","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditAbleSpan from './EditAbleSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport Task from '../features/Todolists/Todolist/Task/Task';\r\nimport {TaskStatuses, TaskType} from '../api/todolist-api';\r\nimport {FilterValuesType} from '../features/Todolists/to-do-list-reducer';\r\nimport {fetchTasksTC} from '../features/Todolists/tasks_reducer';\r\nimport {useDispatch} from 'react-redux';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: null | string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, toDoListID: string) => void\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, toDoListID: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, toDoListID: string) => void,\r\n    changeFilter: (value: FilterValuesType, toDoListID: string) => void,\r\n    changeToDoListTitle: (toDoListID: string, title: string) => void\r\n}\r\n\r\nexport const ToDoList = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeToDoListTitle = useCallback((title: string) => {\r\n        props.changeToDoListTitle(props.id, title,)\r\n    }, [props.changeToDoListTitle, props.id])\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter('all', props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter('active', props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter('completed', props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditAbleSpan value={props.title} changeValue={changeToDoListTitle} disabled={props.entityStatus === 'loading'}/>\r\n                <IconButton\r\n                    disabled={props.entityStatus === 'loading'}\r\n                    onClick={() => {\r\n                        props.removeToDoList(props.id)\r\n                    }}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    toDoListID={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeStatus={props.changeStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}/>)}\r\n            </div>\r\n            <div>\r\n                <Button variant={'contained'}\r\n                        style={{margin: '5px'}}\r\n                        color={props.filter === 'all' ? 'primary' : 'default'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={'contained'}\r\n                        style={{margin: '5px'}}\r\n                        className={props.filter === 'active' ? 'active-filter' : ''}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={'contained'}\r\n                        style={{margin: '5px'}}\r\n                        className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>)\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {\r\n    addTodolistsTC,\r\n    changeFilterTodolistAC,\r\n    changeTitleTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistsTC,\r\n    TodolistDomainType\r\n} from '../to-do-list-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from '../tasks_reducer';\r\nimport {TaskStatuses} from '../../../api/todolist-api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport AddItemForm from '../../../components/AddItemForm';\r\nimport {ToDoList} from '../../../components/ToDoList';\r\nimport {TaskStateType} from '../../../app/App';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    let toDoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    let dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string, toDoListID: string) => {\r\n        dispatch(addTaskTC(toDoListID, title))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskID: string, toDoListID: string) => {\r\n        dispatch(removeTaskTC(taskID, toDoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, toDoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, toDoListID))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeToDoList = useCallback((toDoListID: string) => {\r\n        dispatch(removeTodolistsTC(toDoListID))\r\n    }, [dispatch])\r\n\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, toDoListID: string) => {\r\n        dispatch(changeFilterTodolistAC(value, toDoListID))\r\n    }, [dispatch])\r\n\r\n    const changeToDoListTitle = useCallback((toDoListID: string, title: string) => {\r\n        dispatch(changeTitleTodolistTC(toDoListID, title))\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid style={{padding: '15px'}}>\r\n            <AddItemForm addItem={addToDoList}/>\r\n        </Grid>\r\n        <Grid container={true} spacing={5}>   {/* //строка*/}\r\n            {\r\n                toDoLists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    return (\r\n\r\n                        <Grid item={true} key={tl.id}> {/* //ячейки*/}\r\n                            <Paper style={{padding: '15px'}} elevation={3}>\r\n                                <ToDoList\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    filter={tl.filter}\r\n                                    tasks={allTodolistTasks}\r\n                                    addTask={addTask}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    changeStatus={changeStatus}\r\n                                    removeToDoList={removeToDoList}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeToDoListTitle={changeToDoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    let error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    let dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from './authReducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {AppRootStateType} from '../../app/store';\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{'color': 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            //name=\"password\"\r\n                            //onChange={formik.handleChange}\r\n                            //value={formik.values.password}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{'color': 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.rememberMe}\r\n                                name='rememberMe'\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {TaskType} from '../api/todolist-api';\r\nimport {TodolistsList} from '../features/Todolists/Todolist/Todolist';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {logoutTC} from '../features/Login/authReducer';\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    //1.type of state, 2. what you need\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from '../features/Todolists/tasks_reducer';\r\nimport {todolistsReducer} from '../features/Todolists/to-do-list-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {authReducer} from '../features/Login/authReducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n        <BrowserRouter>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}