{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/Todolists/to-do-list-reducer.ts","features/Todolists/tasks_reducer.ts","components/AddItemForm.tsx","components/EditAbleSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","components/ToDoList.tsx","features/Todolists/Todolist/Todolist.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TodoTaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","taskId","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","count","removeTaskAC","todoListId","changeTaskEntityStatusAC","entityStatus","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","resultCode","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","onAddTaskClick","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyUp","ctrlKey","key","label","helperText","IconButton","onClick","color","disabled","AddBox","EditAbleSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Task","className","Completed","Checkbox","checked","newIsDoneValue","changeStatus","New","toDoListID","changeTaskTitle","removeTask","Delete","ToDoList","useDispatch","useEffect","action","setTasksAC","items","addTask","useCallback","changeToDoListTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeToDoList","map","Button","style","margin","TodolistsList","todolists","toDoLists","useSelector","state","item","addTaskAC","addTaskTC","taskID","a","removeToDoListAC","addToDoList","addTodolistsTC","changeTitleTodolistAC","changeTitleTodolistTC","Grid","padding","container","spacing","tl","allTodolistTasks","Paper","elevation","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","stateCopy","forEach","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9831814a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\nimport {RequestStatusType} from '../app/app-reducer';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '97580e0f-7747-4533-9c03-60f1b0e4f8a8'\r\n    }\r\n})\r\n\r\n//api\r\nexport const todolistAPI = {\r\n    getToDoLists(): Promise<AxiosResponse<Array<TodolistType>>> {\r\n        return instance.get('todo-lists')\r\n    },\r\n    createToDoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteToDoList(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n        //return promise\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<ResponseTasksType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(taskId: string, todolistId: string,) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n//if you have {}\r\n export type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\n//isDone:true - completed\r\nexport enum TodoTaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TodoTaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string,\r\n    entityStatus:RequestStatusType\r\n}\r\ntype ResponseTasksType = {\r\n    items: Array<TaskType>\r\n    error: (string)\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string |null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status}) as const\r\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET-ERROR', error}) as const\r\n\r\nexport type SetAppErrorActionType= ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType= ReturnType<typeof setAppStatusAC>\r\ntype ActionsType =\r\n    |  SetAppErrorActionType\r\n    | SetAppStatusActionType","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from '../api/todolist-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {todolistAPI, TodolistType} from '../../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\n//reducer принимает state & action возвращает newState\r\n//action содержит необходимые превращения и нужные для него данные\r\n//creator для вызова action\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.item, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//cоздание обьетка экшион//ACTION CREATOR\r\n// REDUCER - функция которая содержит в себе все что может пройзойти со state\r\n//actions\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n})\r\nexport const removeToDoListAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addToDoListAC = (item: TodolistType): AddTodolistActionType => ({type: 'ADD-TODOLIST', item})\r\nexport const changeTitleTodolistAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeFilterTodolistAC = (filter: FilterValuesType, id: string,) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    filter,\r\n    id\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getToDoLists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteToDoList(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeToDoListAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const addTodolistsTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createToDoList(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addToDoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const changeTitleTodolistTC = (todolistId: string, title: string,) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTitleTodolistAC(todolistId, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n//types\r\ntype ActionsType =\r\n    | SetTodolistsActionType\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTitleTodolistAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n}\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    item: TodolistType\r\n}\r\n\r\nexport type  FilterValuesType = 'all' | 'active' | 'completed'\r\n//mixed type\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './to-do-list-reducer';\r\nimport {TaskStatuses, TaskType, todolistAPI, TodoTaskPriorities, UpdateTaskModelType} from '../../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n//reducer принимает state & action возвращает newState\r\n//action содержит необходимые превращения и нужные для него данные\r\n//creator для вызова action\r\nlet initialState: TaskStateType = {\r\n    count: [],\r\n}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    entityStatus: action.entityStatus\r\n                } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.item.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//actions\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n}) as const\r\nexport const removeTaskAC = (taskId: string, todoListId: string) => ({type: 'REMOVE-TASK', taskId, todoListId}) as const\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task}) as const\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todoListId,\r\n    taskId\r\n} as const)\r\nexport const changeTaskEntityStatusAC = (taskId: string, todoListId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TASK-ENTITY-STATUS',\r\n    taskId,\r\n    todoListId,\r\n    entityStatus\r\n} as const)\r\n\r\n\r\n//thunk\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\n    async (dispatch: Dispatch<ActionsType>) => {\r\n        try {\r\n            dispatch(setAppStatusAC('loading'))\r\n            dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n            await todolistAPI.deleteTask(taskId, todolistId,)\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'loading'))\r\n        todolistAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, 'idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n\r\n\r\n//types\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>,\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TodoTaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport  type ActionsType =\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\n\r\nexport type  AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n\r\n\r\n    let [title, setTitle] = useState<string>('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddTaskClick = () => {\r\n        if (title.trim()) {\r\n            props.addItem(title.trim());\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n\r\n    }\r\n\r\n    const onKeyUpHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.ctrlKey && e.key === 'Enter') {\r\n            onAddTaskClick()\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyUp={onKeyUpHandler}\r\n                label={'title'}\r\n                helperText={error}\r\n                error={!!error}//строку в лог значение, в итоге дает тру\r\n            />\r\n            <IconButton onClick={onAddTaskClick} color={'primary'} disabled={props.disabled}><AddBox/></IconButton>\r\n            {/*{error && <div className={'error-message'}>{error}</div>}*/}\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type  EditAbleSpanPropsType = {\r\n    value: string\r\n    changeValue: (value: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditAbleSpan = React.memo((props: EditAbleSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activatedEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value);\r\n    }\r\n    const deActivatedEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode && !props.disabled\r\n        ?\r\n        <TextField\r\n            variant={'outlined'}\r\n            value={title}\r\n            onBlur={deActivatedEditMode}\r\n            autoFocus={true}\r\n            onChange={onChangeHandler}\r\n        />\r\n        : <span onDoubleClick={activatedEditMode}>{props.value} </span>\r\n})\r\n\r\nexport default EditAbleSpan","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport EditAbleSpan from '../../../../components/EditAbleSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolist-api';\r\nimport {RequestStatusType} from '../../../../app/app-reducer';\r\n\r\n\r\nexport type  TaskPropsType = {\r\n    task: TaskType\r\n    toDoListID: string\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, toDoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, toDoListID: string) => void,\r\n}\r\n\r\nconst Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.task.id, props.toDoListID)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed:TaskStatuses.New, props.toDoListID)\r\n    }\r\n    const onTitleChangeHandler = (value: string) => {\r\n        props.changeTaskTitle(props.task.id, value, props.toDoListID)\r\n    }\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed  ? 'is-done' : ''}>\r\n        <Checkbox checked={props.task.status===TaskStatuses.Completed}\r\n                  onChange={onChangeHandler}\r\n        />\r\n        <EditAbleSpan value={props.task.title}\r\n                      changeValue={onTitleChangeHandler}\r\n        />\r\n        <IconButton onClick={onClickHandler} disabled={props.task.entityStatus==='loading'} ><Delete/></IconButton>\r\n    </div>\r\n})\r\nexport default Task","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditAbleSpan from './EditAbleSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport Task from '../features/Todolists/Todolist/Task/Task';\r\nimport {TaskStatuses, TaskType} from '../api/todolist-api';\r\nimport {FilterValuesType} from '../features/Todolists/to-do-list-reducer';\r\nimport {fetchTasksTC} from '../features/Todolists/tasks_reducer';\r\nimport {useDispatch} from 'react-redux';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: null | string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    addTask: (title: string, toDoListID: string) => void\r\n    removeTask: (taskID: string, toDoListID: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, toDoListID: string) => void\r\n    removeToDoList: (toDoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, toDoListID: string) => void,\r\n    changeFilter: (value: FilterValuesType, toDoListID: string) => void,\r\n    changeToDoListTitle: (toDoListID: string, title: string) => void\r\n}\r\n\r\nexport const ToDoList = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const changeToDoListTitle = useCallback((title: string) => {\r\n        props.changeToDoListTitle(props.id, title,)\r\n    }, [props.changeToDoListTitle, props.id])\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter('all', props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter('active', props.id)\r\n    }, [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter('completed', props.id)\r\n    }, [props.changeFilter, props.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditAbleSpan value={props.title} changeValue={changeToDoListTitle} disabled={props.entityStatus === 'loading'}/>\r\n                <IconButton\r\n                    disabled={props.entityStatus === 'loading'}\r\n                    onClick={() => {\r\n                        props.removeToDoList(props.id)\r\n                    }}><Delete/></IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n            <div>\r\n                {tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                    toDoListID={props.id}\r\n                    removeTask={props.removeTask}\r\n                    changeStatus={props.changeStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}/>)}\r\n            </div>\r\n            <div>\r\n                <Button variant={'contained'}\r\n                        style={{margin: '5px'}}\r\n                        color={props.filter === 'all' ? 'primary' : 'default'}\r\n                        onClick={onAllClickHandler}>All\r\n                </Button>\r\n                <Button variant={'contained'}\r\n                        style={{margin: '5px'}}\r\n                        className={props.filter === 'active' ? 'active-filter' : ''}\r\n                        onClick={onActiveClickHandler}>Active\r\n                </Button>\r\n                <Button variant={'contained'}\r\n                        style={{margin: '5px'}}\r\n                        className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                        onClick={onCompletedClickHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>)\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {\r\n    addTodolistsTC, changeFilterTodolistAC, changeTitleTodolistTC,\r\n    fetchTodolistsTC, FilterValuesType,\r\n    removeTodolistsTC,\r\n    TodolistDomainType\r\n} from '../to-do-list-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../app/store';\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from '../tasks_reducer';\r\nimport {TaskStatuses} from '../../../api/todolist-api';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport AddItemForm from '../../../components/AddItemForm';\r\nimport {ToDoList} from '../../../components/ToDoList';\r\nimport {TaskStateType} from '../../../app/App';\r\n\r\n\r\nexport const TodolistsList: React.FC = ()=> {\r\n    useEffect(() => {\r\n    dispatch(fetchTodolistsTC())\r\n}, [])\r\n\r\n    let toDoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    let dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string, toDoListID: string) => {\r\n        dispatch(addTaskTC(toDoListID, title))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskID: string, toDoListID: string) => {\r\n        dispatch(removeTaskTC(taskID, toDoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, toDoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {title}, toDoListID))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeToDoList = useCallback((toDoListID: string) => {\r\n        dispatch(removeTodolistsTC(toDoListID))\r\n    }, [dispatch])\r\n\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(addTodolistsTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, toDoListID: string) => {\r\n        dispatch(changeFilterTodolistAC(value, toDoListID))\r\n    }, [dispatch])\r\n\r\n    const changeToDoListTitle = useCallback((toDoListID: string, title: string) => {\r\n        dispatch(changeTitleTodolistTC(toDoListID, title))\r\n    }, [dispatch])\r\n    return <>\r\n        <Grid style={{padding: '15px'}}>\r\n            <AddItemForm addItem={addToDoList}/>\r\n        </Grid>\r\n        <Grid container={true} spacing={5}>   {/* //строка*/}\r\n            {\r\n                toDoLists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    return (\r\n\r\n                        <Grid item={true} key={tl.id}> {/* //ячейки*/}\r\n                            <Paper style={{padding: '15px'}} elevation={3}>\r\n                                <ToDoList\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    filter={tl.filter}\r\n                                    tasks={allTodolistTasks}\r\n                                    addTask={addTask}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    changeStatus={changeStatus}\r\n                                    removeToDoList={removeToDoList}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeToDoListTitle={changeToDoListTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/store';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    let error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    let dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core';\r\nimport {TaskType} from '../api/todolist-api';\r\nimport {TodolistsList} from '../features/Todolists/Todolist/Todolist';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './store';\r\nimport {RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\n\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    //1.type of state, 2. what you need\r\nconst status = useSelector<AppRootStateType,RequestStatusType>(state => state.app.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status=== 'loading' && <LinearProgress color=\"secondary\"/> }\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from '../features/Todolists/tasks_reducer';\r\nimport {todolistsReducer} from '../features/Todolists/to-do-list-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                <AppWithRedux/>\r\n                </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}